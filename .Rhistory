sp_codes
View(sp_codes)
sp_codes
str(sp_codes)
x <- tidyr::separate(sp_codes, sci_name, c("genus", "species"), sep = " ", remove = F)
x
x[2,47]
x[47,2]
x[47,2] <- NA
x
x[12,3]
x[12,3] <- "species D"
x
x[13,3] <- "\"southern\" D"
x
x <- tidyr::separate(sp_codes, sci_name, c("genus", "species"), sep = " ", remove = F)
x
x[47,2] <- NA
x[13,3] <- "\"species\" D"
x
x[13,3] <- "\"species D\""
x
x[55,2] <- NA
x
library(dplyr)
x %>%
select(spcode, common_name, sci_name, family, genus, species, threat_class)
x <- x %>%
select(spcode, common_name, sci_name, family, genus, species, threat_class)
x[c(6, 31, 42, 43, 47, 49, 55, 68),7] <- NA
x
x
x
ifelse(x$threat_class == "introduced", "introduced",
ifelse(is.na(x$threat_class), NA, x$threat_class )
)
x$native <- ifelse(x$threat_class == "introduced", "introduced",
ifelse(is.na(x$threat_class), NA, x$threat_class )
)
x
x$native <- ifelse(x$threat_class == "introduced", "introduced",
ifelse(is.na(x$threat_class), NA, "native")
)
x
x
sp_codes <- x
sp_codes
getwd()
save(MapTilesNZMS260, repl, sp_codes, cl_nms, frm, file = "sysdata.rda")
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/R/sysdata.rda")
devtools::document()
devtools::document()
# compile help documents
devtools::build()
devtools::install()
library(nzffdr)
species_nzffd
dat1 <- clean_nzffd(nzffd_data)
dat1
dat2 <- fill_nzffd(nzffd_data)
View(dat2)
?fill_nzffd
nzffd_data
dat2
View(dat1)
dat1 <- clean_nzffd(nzffd_data)
dat2 <- fill_nzffd(dat1)
?add_nzffd()
dat2 <- fill_nzffd(dat1)
dat3 <- add_nzffd(dat2)
View(dat3)
View(dat1)
View(dat3)
View(dat3)
View(dat3)
str(dat3)
unique(dat3$SPRING)
devtools::document()
# compile help documents
devtools::build()
devtools::install()
devtools::check()
?save
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/R/sysdata.rda")
save(MapTilesNZMS260, repl, sp_codes, cl_nms, frm, file = "sysdata.rda", compress = "xz")
devtools::check()
?add_nzffd()
devtools::document()
devtools::document()
# compile help documents
devtools::build()
devtools::install()
devtools::check()
library(nzffdr)
devtools::check()
rm(list = c("cl_nms", "frm", "MapTilesNZMS260", "repl", "sp_codes"))
nzffdr::cl_nms
# compile help documents
devtools::build()
devtools::install()
library(nzffdr)
dat <- import_nzffd()
head(dat)
dat1 <- clean_nzffd(dat)
unique(dat1$card)
unique(dat1$m)
length(unique(dat1$m))
str(dat)
head(dat1)
str(dat1)
unique(dat1$y)
sort(unique(dat1$y))
sort(unique(dat1$catchname))
sort(unique(dat1$catchname))
View(repl)
View(repl)
table(dat1$catchname)
head(table(dat1$catchname))
dat$catchname[dat$catchname==""]<-NA
head(table(dat1$catchname))
dat1$catchname[dat1$catchname==""]<-NA
head(table(dat1$catchname))
View(dat1)
View(dat1)
unique(dat1$catchname)
sort(unique(dat1$catchname))
sort(unique(dat1$catchname))
sort(unique(dat1$catchname))
sort(unique(dat$catchname))
repl[[1]]
repl
View(repl)
repl[[22]]
names(repl)
paste(paste0("\\b", repl[[22]], "\\b")
fishd$catchname[fishd$catchname == ""] <- NA
sort(unique(dat$catchname))
fishd$locality <- uppr_case(fishd$locality)
fishd$locality <- to_txt(fishd$locality)
# add new variable "form"
fishd <- add_frm(fishd)
# fix time
fishd$time <- to_txt(fishd$time)
fishd$time <- as.POSIXct(sprintf("%s.0f", fishd$time), format = "%H%M")
fishd$time <- chron::chron(times = substr(fishd$time, 12, 19))
attr(fishd$time, "format") <- NULL
fishd$org <- to_txt(fishd$org)
fishd$org <- tolower(fishd$org)
fishd$map <- tolower(fishd$map)
fishd$map[nchar(fishd$map) != 3] <- NA
return(fishd)
}
# helper functions ------------------------------------------------------------
# first letter to upper case
uppr_case <- function(x) {
gsub("\\b([[:lower:]])([[:lower:]]+)",
"\\U\\1\\L\\2", x,
perl = TRUE
)
}
# remove non-letter elements
to_txt <- function(x) {
gsub("[[:punct:]]", "", x)
}
# get last word
lst_wrd <- function(x) {
sub("^.* ([[:alnum:]]+)$", "\\1", x)
}
# cols to intiger
cols_int <- function(x) {
cols <- c(
"card", "m", "y", "east", "north", "altitude", "penet",
"effort", "pass", "number", "minl", "maxl", "nzreach"
)
x[cols] <- lapply(x[cols], function(x) {
suppressWarnings(as.integer(as.character(x)))
})
}
# cols to character
cols_chr <- function(x) {
cols2 <- c("time", "map", "abund")
x[cols2] <- lapply(x[cols2], function(x) {
suppressWarnings(as.character(x))
})
}
# add new variable "form"
add_frm <- function(fishd){
fishd$form <- lst_wrd(fishd$locality)
is.na(fishd$form) <- !(fishd$form %in% frm)
fishd$frm <- stringr::str_extract(fishd$locality, paste(frm, collapse = "|"))
fishd$form <- ifelse(is.na(fishd$form) == TRUE, fishd$frm, fishd$form)
fishd <- subset(fishd, select = -frm)
return(fishd)
}
paste(paste0("\\b", repl[[22]], "\\b"))
paste(paste0("\\b", repl[[22]], "\\b"),collapse = "|")
clean_nzffd <- function(fishd) {
if (is.data.frame(fishd) == FALSE) {
stop("arg fishd must be a data.frame")
}
if (identical(cl_nms, colnames(fishd)) == FALSE) {
stop(paste0("column names must be exactly: ", paste(cl_nms, collapse = ", "))
)
}
# covert column types
cols_int(fishd)
cols_chr(fishd)
fishd$m[fishd$m < 1 | fishd$m > 12] <- NA
fishd$y[fishd$y > as.integer(format(Sys.Date(), "%Y"))] <- NA
fishd$catchname <- uppr_case(fishd$catchname)
# replace site type with relevant abbr. from repl list.
for (i in names(repl)) {
fishd$catchname <- sub(paste(paste0("\\b", repl[[i]], "\\b"),
collapse = "|"
), i, fishd$catchname)
}
for (i in names(repl)) {
fishd$catchname <- sub(paste(paste0("\\b", repl[[i]], "\\b"),
collapse = "|"
), i, fishd$catchname)
}
fishd$catchname[fishd$catchname == ""] <- NA
sort(unique(dat$catchname))
fishd$locality <- uppr_case(fishd$locality)
fishd$locality <- to_txt(fishd$locality)
# add new variable "form"
fishd <- add_frm(fishd)
# fix time
fishd$time <- to_txt(fishd$time)
fishd$time <- as.POSIXct(sprintf("%s.0f", fishd$time), format = "%H%M")
fishd$time <- chron::chron(times = substr(fishd$time, 12, 19))
attr(fishd$time, "format") <- NULL
fishd$org <- to_txt(fishd$org)
fishd$org <- tolower(fishd$org)
fishd$map <- tolower(fishd$map)
fishd$map[nchar(fishd$map) != 3] <- NA
return(fishd)
}
dat1 <- clean_nzffd(dat)
sort(unique(dat1$catchname))
S <- Sys.time()
dat1 <- clean_nzffd(dat)
Sys.time() - S
clean_nzffd <- function(fishd) {
if (is.data.frame(fishd) == FALSE) {
stop("arg fishd must be a data.frame")
}
if (identical(cl_nms, colnames(fishd)) == FALSE) {
stop(paste0("column names must be exactly: ", paste(cl_nms, collapse = ", "))
)
}
# covert column types
cols_int(fishd)
cols_chr(fishd)
fishd$m[fishd$m < 1 | fishd$m > 12] <- NA
fishd$y[fishd$y > as.integer(format(Sys.Date(), "%Y"))] <- NA
fishd$catchname <- uppr_case(fishd$catchname)
# replace site type with relevant abbr. from repl list.
for (i in names(repl)) {
fishd$catchname <- sub(paste(paste0("\\b", repl[[i]], "\\b"),
collapse = "|"
), i, fishd$catchname)
}
fishd$catchname[fishd$catchname == ""] <- NA
sort(unique(dat$catchname))
fishd$locality <- uppr_case(fishd$locality)
fishd$locality <- to_txt(fishd$locality)
# add new variable "form"
fishd <- add_frm(fishd)
# fix time
fishd$time <- to_txt(fishd$time)
fishd$time <- as.POSIXct(sprintf("%s.0f", fishd$time), format = "%H%M")
fishd$time <- chron::chron(times = substr(fishd$time, 12, 19))
attr(fishd$time, "format") <- NULL
fishd$org <- to_txt(fishd$org)
fishd$org <- tolower(fishd$org)
fishd$map <- tolower(fishd$map)
fishd$map[nchar(fishd$map) != 3] <- NA
return(fishd)
}
S <- Sys.time()
dat1 <- clean_nzffd(dat)
Sys.time() - S
sort(unique(dat1$catchname))
View(repl)
sort(unique(dat1$catch))
clean_nzffd <- function(fishd) {
if (is.data.frame(fishd) == FALSE) {
stop("arg fishd must be a data.frame")
}
if (identical(cl_nms, colnames(fishd)) == FALSE) {
stop(paste0("column names must be exactly: ", paste(cl_nms, collapse = ", "))
)
}
# covert column types
cols_int(fishd)
cols_chr(fishd)
fishd$m[fishd$m < 1 | fishd$m > 12] <- NA
fishd$y[fishd$y > as.integer(format(Sys.Date(), "%Y"))] <- NA
fishd$catchname <- uppr_case(fishd$catchname)
# replace site type with relevant abbr. from repl list.
for (i in names(repl)) {
fishd$catchname <- sub(paste(paste0("\\b", repl[[i]], "\\b"),
collapse = "|"
), i, fishd$catchname)
}
# run function again, if there is the word River twice, this
# corrects the second occurrence, penalty of ~3sec on the whole NZFFD
for (i in names(repl)) {
fishd$catchname <- sub(paste(paste0("\\b", repl[[i]], "\\b"),
collapse = "|"
), i, fishd$catchname)
}
fishd$catchname[fishd$catchname == ""] <- NA
fishd$catch[fishd$catch == ""] <- NA
fishd$locality <- uppr_case(fishd$locality)
fishd$locality <- to_txt(fishd$locality)
# add new variable "form"
fishd <- add_frm(fishd)
# fix time
fishd$time <- to_txt(fishd$time)
fishd$time <- as.POSIXct(sprintf("%s.0f", fishd$time), format = "%H%M")
fishd$time <- chron::chron(times = substr(fishd$time, 12, 19))
attr(fishd$time, "format") <- NULL
fishd$org <- to_txt(fishd$org)
fishd$org <- tolower(fishd$org)
fishd$map <- tolower(fishd$map)
fishd$map[nchar(fishd$map) != 3] <- NA
return(fishd)
}
dat1 <- clean_nzffd(dat)
sort(unique(dat1$catch))
sort(unique(dat1$locality))
sort(unique(dat1$time))
sort(unique(dat$time))
View(dat1)
View(dat)
sort(unique(dat$org))
sort(unique(dat1$org))
sort(unique(dat1$map))
sort(unique(dat1$east))
sort(unique(dat1$altitude))
sort(unique(dat1$penet))
sort(unique(dat1$fishmeth))
View(dat1)
sort(unique(dat1$effort))
sort(unique(dat1$pass))
sort(unique(dat1$spcode))
sort(unique(dat1$abund))
sort(unique(dat1$number))
sort(unique(dat1$minl))
View(dat1)
sort(unique(dat1$maxl))
sort(unique(dat1$nzreach))
sort(unique(dat1$form))
install.packages("pkgdown")
# Run once to configure package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::install()
# Run to build the website
pkgdown::build_site()
version
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
?pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
devtools::document()
# compile help documents
devtools::build()
devtools::install()
# Run to build the website
pkgdown::build_site()
devtools::check()
# compile help documents
devtools::build()
devtools::document()
rm(list = c("cl_nms", "frm", "MapTilesNZMS260", "repl", "sp_codes"))
devtools::document()
devtools::check()
Sys.setFileTime()
Sys.setenv('_R_CHECK_SYSTEM_CLOCK_' = 0)
devtools::check()
# Run to build the website
pkgdown::build_site()
# compile help documents
devtools::build()
devtools::document()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# compile help documents
devtools::build()
# Run to build the website
pkgdown::build_site()
devtools::install()
# Run to build the website
pkgdown::build_site()
devtools::document()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# compile help documents
devtools::build()
# compile help documents
devtools::build()
devtools::install()
devtools::document()
devtools::check()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# compile help documents
devtools::build()
devtools::install()
# Run to build the website
pkgdown::build_site()
devtools::document()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# compile help documents
devtools::build()
devtools::document()
devtools::install()
library(nzffdr)
ggplot() +
geom_sf(data = nzffdr::nz3, aes(fill = name)) +
geom_point(data = nzffdr::nzffd_data, aes(x = east, y = north), size = 1, fill = "darkred") +
coord_sf(datum = sf::st_crs(27200)) +
theme_light()
library(ggplot2)
ggplot() +
geom_sf(data = nzffdr::nz3, aes(fill = name)) +
geom_point(data = nzffdr::nzffd_data, aes(x = east, y = north), size = 1, fill = "darkred") +
coord_sf(datum = sf::st_crs(27200)) +
theme_light()
?geom_sf
devtools::check()
?nzffdr::nz3
library(nzffdr)
?nzffdr::nz3
?nzffdr::dat3
load("E:/Dropbox/Dropbox/3.RandomR/PACKAGES/nzffdr/data/nzmap_nzffd.rda")
devtools::document()
# compile help documents
devtools::build()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
# compile help documents
devtools::build()
devtools::document()
load("E:/Dropbox/Dropbox/3.RandomR/PACKAGES/nzffdr/data/nzmap_nzffd.rda")
nzmap_nzffd <- nz3
getwd()
save(nzmap_nzffd, file = "nzmap_nzffd.rda")
load("E:/Dropbox/Dropbox/3.RandomR/PACKAGES/nzffdr/data/nzmap_nzffd.rda")
load("E:/Dropbox/Dropbox/3.RandomR/PACKAGES/nzffdr/data/nzmap_nzffd.rda")
devtools::document()
# compile help documents
devtools::build()
devtools::install()
library(nzffdr)
?nzmap_nzffdr
devtools::document()
# compile help documents
devtools::build()
devtools::install()
devtools::check()
nzffdr::nzmap_nzffd
?nzffdr::nzmap_nzffd
library(nzffdr)
ggplot() +
geom_sf(data = nzffdr::nz3, aes(fill = name)) +
geom_point(data = nzffdr::nzffd_data, aes(x = east, y = north), size = 1, fill = "darkred") +
coord_sf(datum = sf::st_crs(27200)) +
theme_light()
ggplot() +
geom_sf(data = nzffdr::nzmap_nzffd, aes(fill = name)) +
geom_point(data = nzffdr::nzffd_data, aes(x = east, y = north), size = 1, fill = "darkred") +
coord_sf(datum = sf::st_crs(27200)) +
theme_light()
ggplot() +
geom_sf(data = nzffdr::nzmap_nzffd, aes(fill = name)) +
geom_point(data = nzffdr::nzffd_data, aes(x = east, y = north), size = 1, fill = "darkred") +
coord_sf(datum = sf::st_crs(27200)) +
theme_light()
# Run to build the website
pkgdown::build_site()
