# function help files
?import_nzffd()
?fill_nzffd()
?add_nzffd()
# data help file pages
?species_nzffd
version
remove.packages("nzffdr", lib="~/R/win-library/3.6")
library(devtools)
install_github("flee598/nzffdr", auth_token = "a1f973f757053d5a01c7027a6c5313136fafab91")
?download.file
install.packages("gtools")
library(tidyverse)
library(gtools)
dat <- read_rds("MergedTrtDataOut_0907.rds")
dat <- filter(dat, pDist == 0)
dat$ExtnctLoc <- dat$N == 0
DivAlph <- dat %>%
group_by(Reps, Nwrk, pDisp, site) %>%
summarise(Alph = sum(ExtnctLoc == FALSE)) %>%
group_by(Nwrk, pDisp, site) %>%
summarise(MedAlph = mean(Alph),
Alph05 = quantile(Alph, c(0.05)),
Alph95 = quantile(Alph, c(0.95)),
CVAlph = (sd(Alph) / mean(Alph)) * 100)
head(dat)
install.packages("devtools")
"ho there"
xx <- "ho there"
toupper(substr(xx, 1, 1)
)
substr(xx, 1, 1)
toupper(xx)
substr(x, 1, 1)
substr(xx, 1, 1)
mean
sd
sd("ht")
x <- "fff"
sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x),
na.rm = na.rm))
as.double(x)
install.packages("rgdal")
library(nzffdr)
devtools::install_github("orb16/southernMaps")
devtools::install_github("orb16/southernMaps")
install.packages(c("boot", "digest", "DT", "foreign", "haven", "KernSmooth", "knitr", "mgcv", "nlme", "R6", "Rcpp", "rmarkdown", "roxygen2", "rvest", "scales", "selectr", "survival", "tidyverse", "xfun"))
devtools::install_github("orb16/southernMaps")
library(southernMaps) # NZ map that plays nice
install.packages("maptools")
# load required packages
library(devtools)
# devtools::install_github("orb16/southernMaps")
library(southernMaps) # NZ map that plays nice
library(tidyverse)    # data handling functions
library(sp)           # coordinate conversion
library(rgdal)        # coordinate conversion
library(nzffdr)
# import all records between 2000 and 2010
dat <- import_nzffd(catchment = "", river = "", location = "",
fish_method = "", species = "", starts = 2000, ends = 2010)
head(dat)
dat2 <- clean_nzffd(dat)
dat3 <- fill_nzffd(dat2, alt = TRUE, maps = TRUE)
dat4 <- add_nzffd(dat3)
# load required packages
library(devtools)
# devtools::install_github("orb16/southernMaps")
library(southernMaps) # NZ map that plays nice
library(tidyverse)    # data handling functions
library(sp)           # coordinate conversion
library(rgdal)        # coordinate conversion
library(nzffdr)
# transform the NZFFD coords (from NZMG to WGS84 lat/long)
dat_coord <- data.frame(x = dat4$east, y = dat4$north)
sp::coordinates(dat_coord) <- ~ x + y
proj4string <- "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150
+ellps=intl +datum=nzgd49 +units=m +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993
+nadgrids=nzgd2kgrid0005.gsb +no_defs" # NZMG49
sp::proj4string(dat_coord) <- sp::CRS(proj4string)
dat_coord <- sp::spTransform(dat_coord, sp::CRS("+init=epsg:4326")) #WGS84
dat_coord <- as.data.frame(dat_coord)
# reattch coords
dat4$wgs84_x <- dat_coord$x
dat4$wgs84_y <- dat_coord$y
# Subset Mudfish data ---------------------------------------------------------
mud <- c("Canterbury mudfish", "Burgundy mudfish",
"Brown mudfish", "Black mudfish")
fish_map <- dat4 %>%
filter(common_name %in% mud) %>%
filter(catch != "Chatham")
# Mapping ---------------------------------------------------------------------
# get a friendly NZ map
nzmap <- southernMaps::nzHigh
nzmap <- southernMaps::fortify_polygons(nzmap, proj = "wgs84")
install.packages("regos")
install.packages("rgeos")
# get a friendly NZ map
nzmap <- southernMaps::nzHigh
nzmap <- southernMaps::fortify_polygons(nzmap, proj = "wgs84")
install.packages("rgdal")
install.packages("rgdal")
# load required packages
library(devtools)
# devtools::install_github("orb16/southernMaps")
library(southernMaps) # NZ map that plays nice
library(tidyverse)    # data handling functions
library(sp)           # coordinate conversion
library(rgdal)        # coordinate conversion
library(nzffdr)
# transform the NZFFD coords (from NZMG to WGS84 lat/long)
dat_coord <- data.frame(x = dat4$east, y = dat4$north)
sp::coordinates(dat_coord) <- ~ x + y
proj4string <- "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150
+ellps=intl +datum=nzgd49 +units=m +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993
+nadgrids=nzgd2kgrid0005.gsb +no_defs" # NZMG49
sp::proj4string(dat_coord) <- sp::CRS(proj4string)
dat_coord <- sp::spTransform(dat_coord, sp::CRS("+init=epsg:4326")) #WGS84
dat_coord <- as.data.frame(dat_coord)
# reattch coords
dat4$wgs84_x <- dat_coord$x
dat4$wgs84_y <- dat_coord$y
# Subset Mudfish data ---------------------------------------------------------
mud <- c("Canterbury mudfish", "Burgundy mudfish",
"Brown mudfish", "Black mudfish")
fish_map <- dat4 %>%
filter(common_name %in% mud) %>%
filter(catch != "Chatham")
# Mapping ---------------------------------------------------------------------
# get a friendly NZ map
nzmap <- southernMaps::nzHigh
nzmap <- southernMaps::fortify_polygons(nzmap, proj = "wgs84")
# get a friendly NZ map
nzmap <- southernMaps::nzHigh
nzmap <- southernMaps::fortify_polygons(nzmap, proj = "wgs84")
# Plot all 4 species on one map
ggplot(nzmap, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
coord_map() +
geom_point(data = fish_map, aes(x = wgs84_x, y = wgs84_y, colour = common_name)) +
theme_minimal() +
labs(color = "Species")
install.packages("mapproj")
# load required packages
library(devtools)
# devtools::install_github("orb16/southernMaps")
library(southernMaps) # NZ map that plays nice
library(tidyverse)    # data handling functions
library(sp)           # coordinate conversion
library(rgdal)        # coordinate conversion
library(nzffdr)
# Add WGS84 lat longs ---------------------------------------------------------
# transform the NZFFD coords (from NZMG to WGS84 lat/long)
dat_coord <- data.frame(x = dat4$east, y = dat4$north)
sp::coordinates(dat_coord) <- ~ x + y
proj4string <- "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150
+ellps=intl +datum=nzgd49 +units=m +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993
+nadgrids=nzgd2kgrid0005.gsb +no_defs" # NZMG49
sp::proj4string(dat_coord) <- sp::CRS(proj4string)
dat_coord <- sp::spTransform(dat_coord, sp::CRS("+init=epsg:4326")) #WGS84
dat_coord <- as.data.frame(dat_coord)
# reattch coords
dat4$wgs84_x <- dat_coord$x
dat4$wgs84_y <- dat_coord$y
# Subset Mudfish data ---------------------------------------------------------
mud <- c("Canterbury mudfish", "Burgundy mudfish",
"Brown mudfish", "Black mudfish")
fish_map <- dat4 %>%
filter(common_name %in% mud) %>%
filter(catch != "Chatham")
# Mapping ---------------------------------------------------------------------
# get a friendly NZ map
nzmap <- southernMaps::nzHigh
nzmap <- southernMaps::fortify_polygons(nzmap, proj = "wgs84")
# Plot all 4 species on one map
ggplot(nzmap, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
coord_map() +
geom_point(data = fish_map, aes(x = wgs84_x, y = wgs84_y, colour = common_name)) +
theme_minimal() +
labs(color = "Species")
library(nzffdr)
remove.packages("nzffdr")
library(nzffdr)
devtools::document()
devtools::check()
# function help files
?import_nzffd()
?clean_nzffd()
?fill_nzffd()
?add_nzffd()
file.exists("~/.ssh/id_rsa.pub")
dat <- import_nzffd(
catchment = "", river = "", location = "",
fish_method = "", species = "", starts = 2010, ends = 2019)
catchment <- ""
if (((catchment == "") || grepl("^\\d+\\%$", catchment) ||
grepl("^\\d{3}\\.\\d{3}$", catchment)) == FALSE) {
stop("arg: catchment must be 6-digit character string (e.g. \"752.638\")
or numbers followed by % for wildcard searches (e.g.\"752%\"), or left
blank to seach all (e.g. \"\")", call. = FALSE)
}
catchment <- ""
if (((catchment == "") || grepl("^\\d+\\%$", catchment) ||
grepl("^\\d{3}\\.\\d{3}$", catchment))) {
stop("arg: catchment must be 6-digit character string (e.g. \"752.638\")
or numbers followed by % for wildcard searches (e.g.\"752%\"), or left
blank to seach all (e.g. \"\")", call. = FALSE)
}
((catchment == "") || grepl("^\\d+\\%$", catchment) ||
grepl("^\\d{3}\\.\\d{3}$", catchment))
grepl("^\\d+\\%$", catchment)
grepl("^\\d{3}\\.\\d{3}$", catchment)
method_nzffd
nzffdr::nzffd_data
tail(nzffdr::nzffd_data, 100)
if (is.data.frame(fishd) == FALSE) {
stop("arg fishd must be a data.frame")
}
fishd <- c(5,2)
if (is.data.frame(fishd) == FALSE) {
stop("arg fishd must be a data.frame")
}
if (is.data.frame(fishd)) {
stop("arg fishd must be a data.frame")
}
is.data.frame(fishd)
if (!is.data.frame(fishd)) {
stop("arg fishd must be a data.frame")
}
if ("nzreach" %in% colnames(fishd) == FALSE) {
stop("dataframe must include \"nzreach\" column")
}
if ("nzreach" %in% colnames(fishd)) {
stop("dataframe must include \"nzreach\" column")
}
if ("nzreach" %in% !colnames(fishd)) {
stop("dataframe must include \"nzreach\" column")
}
if ("nzreach" !%in% colnames(fishd)) {
stop("dataframe must include \"nzreach\" column")
}
if (!("nzreach" %in% colnames(fishd))) {
stop("dataframe must include \"nzreach\" column")
}
styler:::style_active_file()
a <- rep(10, 10)
b <- rep(10, 15)
all.equal(a,b)
?all.equal
length(a) == length(b)
if (length(a) == length(b)) {
stop("arg fishd must be a data.frame")
}
if (length(a) != length(b)) {
stop("arg fishd must be a data.frame")
}
stopifnot(
is.numeric(east)
is.numeric(north)
)
stopifnot(
is.numeric(east)
is.numeric(north)
)
stopifnot(
is.numeric(east),
is.numeric(north)
)
east <- nzffdr::nzffd_data$east
north <- nzffdr::nzffd_data$north
stopifnot(
is.numeric(east),
is.numeric(north)
)
if (length(east) != length(east)) {
stop("east and north must be the same length")
}
proj4string <- "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150
+ellps=intl +datum=nzgd49 +units=m +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993
+nadgrids=nzgd2kgrid0005.gsb +no_defs"
coords <- data.frame(east, north)
coords
data.frame(a,b)
sp::coordinates(coords) <- ~ east + north
sp::proj4string(coords) <- sp::CRS(proj4string)
coords <- sp::spTransform(coords, sp::CRS("+init=epsg:4326"))
as.data.frame(coords)
?CRS
projargs = "+init=epsg:4326"
coords <- data.frame(east, north)
proj4string <- "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150
+ellps=intl +datum=nzgd49 +units=m +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993
+nadgrids=nzgd2kgrid0005.gsb +no_defs"
sp::coordinates(coords) <- ~ east + north
sp::proj4string(coords) <- sp::CRS(proj4string)
coords <- sp::spTransform(coords, sp::CRS(projargs))
as.data.frame(coords)
library(tidyverse)
?ggsavw
?ggsave
?ggsave
getwd()
xx <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
ggsave("mtcars.pdf", plot = xx, device = "png",
width = 10, height = 5, units = "cm")
xx <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
ggsave("mtcars.png", plot = xx, device = "png",
width = 10, height = 5, units = "cm")
xx <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
ggsave("mtcars2.png", plot = xx, device = "png",
width = 15, height = 7.5, units = "cm")
source("f1_CreateNwkCh3.R")
library(igraph)
library(tidyverse)
den_nwk <- fun_crtNwk(nNodes = 32, shape = "den")
setwd("E:/Dropbox/Dropbox/1.PhD/1.Thesis/Ch3Traits/R2")
source("f1_CreateNwkCh3.R")
den_nwk <- fun_crtNwk(nNodes = 32, shape = "den")
# Distribute E by order -------------------------------------------------------
env_order <- function(den_nwk, Egradient = 32) {
# new sample function to deal with vectors of length 1
sample.vec <- function(x, ...) x[sample(length(x), ...)]
den_nwk <- den_nwk[[1]]$unweighted_mtx
ig <- igraph::graph.adjacency(den_nwk, mode = "directed", weighted = TRUE)
sOrder <- igraph::distances(ig, v = V(ig), to = 1)
sOrder <- max(sOrder) - sOrder + 1
sOrder <- data.frame(site = 1:nrow(sOrder), Sorder = sOrder, row.names = NULL)
colnames(sOrder) <- c("site", "st_order")
sOrder$E <- NA
sOrder <- split(sOrder, sOrder$st_order)
E <- 1:Egradient
probs <- rep(1, Egradient)
i <- 1
while (i <= length(sOrder)) {
E2 <- sample.vec(E, 1)
sOrder[[i]]$E[1] <- E2
E <- dplyr::setdiff(E, sOrder[[i]]$E[1])
probs <- E - E2
probs <- ifelse(probs < 0, probs * -1, probs)
probs <- dexp(probs, rate = 1) # rate controls the strength of expontial
# decline in probability with E distance
if (nrow(sOrder[[i]]) > 1) {
sOrder[[i]]$E[2:length(sOrder[[i]]$E)] <- sample.vec(E,
length(sOrder[[i]]$E) - 1, prob = probs)
E <- dplyr::setdiff(E, sOrder[[i]]$E)
}
i <- i + 1
}
sOrder <- dplyr::bind_rows(sOrder)
return(sOrder[order(sOrder$site), ])
}
xx <- env_order(den_nwk = den_nwk, Egradient = 32)
xx
den_nwk <- den_nwk[[1]]$unweighted_mtx
ig <- igraph::graph.adjacency(den_nwk, mode = "directed", weighted = TRUE)
ig
devtools::document()
5+5
?available.packages
available.packages()
pack <- available.packages()
pack["ggplot2","Depends"]
pack <- available.packages()
pack["nzffdr","Depends"]
pack <- available.packages()
pack["nzffdr","Depends"]
pack <- available.packages()
pack["ggplot2","Depends"]
pack <- available.packages()
pack["dplyr","Depends"]
library(nzffdr)
dat <- import_nzffd()
# function help files
?import_nzffd()
dat <- import_nzffd(ends = 2100)
dat <- import_nzffd()
dat <- import_nzffd(ends = 2100)
dat <- import_nzffd(ends = "2100")
# compile help documents
devtools::build()
devtools::install()
devtools::document()
devtools::check()
dat <- import_nzffd()
head(dat)
str(dat)
dat1 <- clean_nzffd(dat)
head(dat1)
str(dat1)
?clean_nzffd
dat2 <- fill_nzffd(dat1)
?fill_nzffd
head(dat3)
head(dat2)
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/data/species_nzffd.rda")
View(species_nzffd)
View(species_nzffd)
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/R/sysdata.rda")
View(sp_codes)
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/R/sysdata.rda")
getwd()
save(MapTilesNZMS260, repl, sp_codes, cl_nms, frm, file = "mydata.rda")
sp_codes
library(tidyverse)
?separate
separate(sp_codes$sci_name, c("genus", "species"))
separate(sp_codes$sci_name, c("genus", "species"), sep = " ")
str(sp_codes)
separate(sp_codes, sci_name, c("genus", "species"), sep = " ")
sp_codes
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/R/sysdata.rda")
sp_codes
separate(sp_codes, sci_name, c("genus", "species"), sep = " ")
tidyr::separate(sp_codes, sci_name, c("genus", "species"), sep = " ")
?tidyr::separate()
tidyr::separate(sp_codes, sci_name, c("genus", "species"), sep = " ", remove = F)
x <- tidyr::separate(sp_codes, sci_name, c("genus", "species"), sep = " ", remove = F)
x
sp_codes
View(sp_codes)
sp_codes
str(sp_codes)
x <- tidyr::separate(sp_codes, sci_name, c("genus", "species"), sep = " ", remove = F)
x
x[2,47]
x[47,2]
x[47,2] <- NA
x
x[12,3]
x[12,3] <- "species D"
x
x[13,3] <- "\"southern\" D"
x
x <- tidyr::separate(sp_codes, sci_name, c("genus", "species"), sep = " ", remove = F)
x
x[47,2] <- NA
x[13,3] <- "\"species\" D"
x
x[13,3] <- "\"species D\""
x
x[55,2] <- NA
x
library(dplyr)
x %>%
select(spcode, common_name, sci_name, family, genus, species, threat_class)
x <- x %>%
select(spcode, common_name, sci_name, family, genus, species, threat_class)
x[c(6, 31, 42, 43, 47, 49, 55, 68),7] <- NA
x
x
x
ifelse(x$threat_class == "introduced", "introduced",
ifelse(is.na(x$threat_class), NA, x$threat_class )
)
x$native <- ifelse(x$threat_class == "introduced", "introduced",
ifelse(is.na(x$threat_class), NA, x$threat_class )
)
x
x$native <- ifelse(x$threat_class == "introduced", "introduced",
ifelse(is.na(x$threat_class), NA, "native")
)
x
x
sp_codes <- x
sp_codes
getwd()
save(MapTilesNZMS260, repl, sp_codes, cl_nms, frm, file = "sysdata.rda")
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/R/sysdata.rda")
devtools::document()
devtools::document()
# compile help documents
devtools::build()
devtools::install()
library(nzffdr)
species_nzffd
dat1 <- clean_nzffd(nzffd_data)
dat1
dat2 <- fill_nzffd(nzffd_data)
View(dat2)
?fill_nzffd
nzffd_data
dat2
View(dat1)
dat1 <- clean_nzffd(nzffd_data)
dat2 <- fill_nzffd(dat1)
?add_nzffd()
dat2 <- fill_nzffd(dat1)
dat3 <- add_nzffd(dat2)
View(dat3)
View(dat1)
View(dat3)
View(dat3)
View(dat3)
str(dat3)
unique(dat3$SPRING)
devtools::document()
# compile help documents
devtools::build()
devtools::install()
devtools::check()
?save
load("C:/Users/flee598/Dropbox/3.RandomR/PACKAGES/nzffdr/R/sysdata.rda")
save(MapTilesNZMS260, repl, sp_codes, cl_nms, frm, file = "sysdata.rda", compress = "xz")
devtools::check()
?add_nzffd()
devtools::document()
devtools::document()
# compile help documents
devtools::build()
devtools::install()
devtools::check()
